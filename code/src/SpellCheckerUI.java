/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;




/**
 *
 * @author Wild
 */
public class SpellCheckerUI extends javax.swing.JFrame {
    final JFileChooser fileChooser = new JFileChooser();
    static String inputString=null;

    /**
     * Creates new form SpellCheckerUI
     */
    public SpellCheckerUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButtonPlay = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonCheck = new javax.swing.JButton();
        jButtonRepeat = new javax.swing.JButton();
        jButtonReveal = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileOpen = new javax.swing.JMenu();
        jMenuOpen = new javax.swing.JMenuItem();
        jMenuSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuView = new javax.swing.JMenuItem();
        jMenuAdd = new javax.swing.JMenuItem();
        jMenuRemove = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Type the word spelled"));
        jPanel1.setToolTipText("");


        jButtonPlay.setText("Play");
        jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayActionPerformed(evt);
            }
        });

        jButtonCheck.setText("Check");
        jButtonCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckActionPerformed(evt);
            }
        });

        jButtonRepeat.setText("Repeat");
        jButtonRepeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRepeatActionPerformed(evt);
            }
        });

        jButtonReveal.setText("Reveal");
        jButtonReveal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRevealActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jButtonPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButtonRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButtonReveal, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButtonCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonReveal, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        fileOpen.setText("File");

        jMenuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuOpen.setText("Open");
        jMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenActionPerformed(evt);
            }
        });
        fileOpen.add(jMenuOpen);

        jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuSave.setText("Save");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        fileOpen.add(jMenuSave);
        fileOpen.add(jSeparator1);

        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        fileOpen.add(jMenuExit);

        jMenuBar1.add(fileOpen);

        jMenu2.setText("Edit");

        jMenuView.setText("View");
        jMenuView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuViewActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuView);

        jMenuAdd.setText("Add");
        jMenuAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAddActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuAdd);

        jMenuRemove.setText("Remove");
        jMenuRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRemoveActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuRemove);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenActionPerformed
        fileChooser.setDialogTitle("Specify a file to open"); 
        if(fileChooser.showOpenDialog(null)==JFileChooser.APPROVE_OPTION){
            try {
            	SpellChecker.file=fileChooser.getSelectedFile();
                SpellChecker.readFile(SpellChecker.file);
                
                } catch (FileNotFoundException ex) {
                 Logger.getLogger(SpellCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
                }
              }
              else {
                    System.out.println("No file selected");
                   }
    }//GEN-LAST:event_jMenuOpenActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jMenuViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuViewActionPerformed
        // TODO add your handling code here:
        JFrame contentFrame = new JFrame();
        contentFrame.setTitle("Current Wordlist");
        JTextArea textArea = new JTextArea(15, 20);
        textArea.setText(SpellChecker.displayWordList());
        contentFrame.add(textArea);
        Dimension d = new Dimension(textArea.getWidth(),textArea.getHeight());
        JScrollPane scroll = new JScrollPane (textArea);
        scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        contentFrame.add(scroll);
        contentFrame.pack();
        contentFrame.setPreferredSize(d);
        contentFrame.setVisible(true);
    }//GEN-LAST:event_jMenuViewActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed

            try {
                JFrame contentFrame = new JFrame();
                fileChooser.setDialogTitle("Specify a file to save");   
 
                int userSelection = fileChooser.showSaveDialog(contentFrame);
 
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                	SpellChecker.file = fileChooser.getSelectedFile();
                    SpellChecker.writeFile(SpellChecker.file);
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(SpellCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(SpellCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jMenuSaveActionPerformed

    private void jMenuAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAddActionPerformed
        // TODO add your handling code here:
        final JFrame contentFrame = new JFrame();
        contentFrame.setTitle("Add a new word");
        JPanel TextPanel = new JPanel();  
        final JTextField jtfNewWord = new JTextField(30){
            public Dimension getPreferredSize() {
                return new Dimension(300,33);
            };
        };
        jtfNewWord.setText("");
        TextPanel.add(jtfNewWord); 
        
        JPanel ButtonPanel = new JPanel(); 
        JButton jbtAdd = new JButton("Add"){
            public Dimension getPreferredSize() {
                return new Dimension(81,33);
            };
        };
        
        ButtonPanel.add(jbtAdd);
        
        contentFrame.add(ButtonPanel, BorderLayout.CENTER);  
        contentFrame.add(TextPanel, BorderLayout.NORTH);
        //Dimension d = new Dimension(textArea.getWidth(),textArea.getHeight());
        contentFrame.pack();
        //contentFrame.setPreferredSize(d);
        contentFrame.setVisible(true);
        contentFrame.setResizable(false);
        
        jbtAdd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String newWord=jtfNewWord.getText();
                if(newWord.isEmpty()){
                    jtfNewWord.setText("Type a new word you want to insert.");
                }
                else{
                	SpellChecker.wordList.add(newWord);
                    contentFrame.dispose();
                }
                
            }
        });
        
        
    }//GEN-LAST:event_jMenuAddActionPerformed

    private void jMenuRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRemoveActionPerformed
        // TODO add your handling code here:
        final JFrame contentFrame = new JFrame();
        contentFrame.setTitle("Select a word to remove");
        
        final JComboBox jcbShift = new JComboBox(SpellChecker.wordList.toArray()){
            public Dimension getPreferredSize() {
                return new Dimension(300,33);
            };
        };
        jcbShift.setForeground(Color.black);
        jcbShift.setBackground(Color.white);
        
        
        
        JPanel ComboPanel = new JPanel();  
        ComboPanel.setLayout(new GridBagLayout()); 
        ComboPanel.add(jcbShift); 
        
        JPanel ButtonPanel = new JPanel();
        ButtonPanel.setLayout(new GridBagLayout()); 
        JButton jbtRemove = new JButton("Remove") {
            public Dimension getPreferredSize() {
                return new Dimension(81,33);
            };
        };
        
        JButton jbtClose = new JButton("Close"){
            public Dimension getPreferredSize() {
                return new Dimension(81,33);
            };
        };
        ButtonPanel.add(jbtRemove);
        ButtonPanel.add(jbtClose);
        
        contentFrame.add(ButtonPanel, BorderLayout.CENTER);  
        contentFrame.add(ComboPanel, BorderLayout.NORTH);
        //Dimension d = new Dimension(textArea.getWidth(),textArea.getHeight());
        contentFrame.pack();
        //contentFrame.setPreferredSize(d);
        contentFrame.setVisible(true);
        contentFrame.setResizable(false);
        
        jbtClose.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                contentFrame.dispose();
            }
        });
        
        
        jbtRemove.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedWord=(String) jcbShift.getSelectedItem();
                jcbShift.removeItem(selectedWord);
                SpellChecker.wordList.remove(selectedWord);
                Collections.sort(SpellChecker.wordList);
            }
        });
        
    }//GEN-LAST:event_jMenuRemoveActionPerformed

    private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed
        // TODO add your handling code here:
        jLabel2.setText(null);
        jTextField1.setText(null);
        jLabel1.setIcon(null);
        jLabel1.revalidate();
        jTextField1.revalidate();
        jLabel2.revalidate();
        
        if(SpellChecker.wordList.size()==0){
            jTextField1.setText("Wordlist is empty. Please select a wordlist or add a new word.");
        }
        else{
            inputString=SpellChecker.selectRandom();
            //create an arraylist of paths to all sounds in inputString

            
//            List<InputStream> paths=new ArrayList<InputStream>();
//            for(int i=0;i<inputString.length();i++) {
//                String pathStr=inputString.charAt(i)+".wav";
//               
//                InputStream inaudio;
//                //try {
////                    inaudio = new BufferedInputStream(new FileInputStream(new File(
////                            getClass().getClassLoader().getResource(pathStr).getPath())));
//                    inaudio=SpellCheckerUI.class.getResourceAsStream(pathStr);
//                    paths.add(inaudio);
//                    
////                } catch (FileNotFoundException ex) {
////                    Logger.getLogger(SpellCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
////                }
//                                       
//            }
//          //create an arraylist of paths to all sounds in inputString
            List<String> paths = new ArrayList<String>();

            for(int i=0;i<inputString.length();i++) {
                String pathStr="sounds/"+inputString.charAt(i)+".wav";
                
                URL url = this.getClass().getResource(pathStr);
                paths.add(url.getPath());
                
            }
                
            AudioInputStream clip1 = null;

            //pronounce all sounds in paths
            for (String path : paths){
                try {
                        if(clip1 == null){
                            clip1 = AudioSystem.getAudioInputStream(new File(path));
                            //clip1 = AudioSystem.getAudioInputStream(path);
                            continue;
                        }
                        AudioInputStream clip2 = AudioSystem.getAudioInputStream(new File(path));
                        //AudioInputStream clip2 = AudioSystem.getAudioInputStream(path);
                        AudioInputStream appendedFiles = new AudioInputStream(
                            new SequenceInputStream(clip1, clip2),
                            clip1.getFormat(),
                            clip1.getFrameLength() + clip2.getFrameLength());
                        clip1 = appendedFiles;
                    } catch (UnsupportedAudioFileException ex) {
                        Logger.getLogger(SpellCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(SpellCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

            }
            SpellChecker.play( clip1);
            
            
            
        }
    }//GEN-LAST:event_jButtonPlayActionPerformed


    private void jButtonCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckActionPerformed
        // TODO add your handling code here:
//        jLabel2.setText(null);
//        jTextField1.setText(null);
//        jLabel1.setIcon(null);
//        jLabel1.revalidate();
//        jTextField1.revalidate();
//        jLabel2.revalidate();
        String outputString=jTextField1.getText();
        if(outputString.length()!=0){
            URL picURL;
            if(outputString.toLowerCase().equals(inputString.toLowerCase())){
                picURL= getClass().getResource("yes.png");

            }
            else{
                picURL = getClass().getResource("no.png");
                jLabel2.setText("INCORRECT. The correct answer is: "+inputString);
            }
            try {
            Image img;

                img = ImageIO.read(picURL);

            Image resizedImage;
            resizedImage = img.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(),0);
            jLabel1.setIcon(new ImageIcon(resizedImage));
             } catch (IOException ex) {
                Logger.getLogger(SpellCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
            jTextField1.setText("Enter a word pronounced.");
    }//GEN-LAST:event_jButtonCheckActionPerformed

    private void jButtonRepeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRepeatActionPerformed
        // TODO add your handling code here:
        jLabel2.setText(null);
        jTextField1.setText(null);
        jLabel1.setIcon(null);
        jLabel1.revalidate();
        jTextField1.revalidate();
        jLabel2.revalidate();
        if (inputString==null)
            inputString=SpellChecker.selectRandom();
        if(SpellChecker.wordList.size()==0){
            jTextField1.setText("Wordlist is empty. Please select a wordlist or add a new word.");
        }
        else {
            
            //create an arraylist of paths to all sounds in inputString
            List<String> paths = new ArrayList<String>();

            for(int i=0;i<inputString.length();i++) {
            	String pathStr="sounds/"+inputString.charAt(i)+".wav";
                
                URL url = this.getClass().getResource(pathStr);
                paths.add(url.getPath());
                
            }
            
            AudioInputStream clip1 = null;

            //pronounce all sounds in paths
            for (String path : paths){
                try {
                        if(clip1 == null){
                            clip1 = AudioSystem.getAudioInputStream(new File(path));
                            continue;
                        }
                        AudioInputStream clip2 = AudioSystem.getAudioInputStream(new File(path));
                        AudioInputStream appendedFiles = new AudioInputStream(
                            new SequenceInputStream(clip1, clip2),
                            clip1.getFormat(),
                            clip1.getFrameLength() + clip2.getFrameLength());
                        clip1 = appendedFiles;
                    } catch (UnsupportedAudioFileException ex) {
                        Logger.getLogger(SpellCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(SpellCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

            }
            SpellChecker.play( clip1);
            
            
            
        }
    }//GEN-LAST:event_jButtonRepeatActionPerformed

    private void jButtonRevealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRevealActionPerformed
        // TODO add your handling code here:
        jTextField1.setText(inputString);
    }//GEN-LAST:event_jButtonRevealActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpellCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpellCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpellCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpellCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpellCheckerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileOpen;
    private javax.swing.JButton jButtonCheck;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonRepeat;
    private javax.swing.JButton jButtonReveal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuAdd;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenuItem jMenuOpen;
    private javax.swing.JMenuItem jMenuRemove;
    private javax.swing.JMenuItem jMenuSave;
    private javax.swing.JMenuItem jMenuView;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
